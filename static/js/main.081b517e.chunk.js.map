{"version":3,"sources":["logo.svg","Components/ScoreBoard.js","Components/QuestionComponent.js","Components/Questions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ScoreBoard","props","increaseScore","updateScore","decreaseScore","resetScore","className","this","score","onClick","Component","QuestionComponent","class","question","category","title","value","clickRevealAnswer","revealAnswer","answer","Questions","getQuestions","setState","state","questions","map","App","getData","action","searchURL","fetch","response","json","result","console","log","onChange","eventHandler","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.081b517e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\n\nclass ScoreBoard extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    increaseScore = () => {\n        this.props.updateScore('increase');\n    }\n\n    decreaseScore = () => {\n        this.props.updateScore('decrease');\n    }\n\n    resetScore = () => {\n        this.props.updateScore('reset');\n    }\n\n    render() {\n        return (\n            <div className=\"score-board\">\n                <h2>Score: {this.props.score}</h2>\n                <button onClick={this.decreaseScore}>Decrease</button>\n                <button onClick={this.increaseScore}>Increase</button>\n                <button onClick={this.resetScore}>Reset</button>\n            </div>\n        )\n    }\n}\n\nexport default ScoreBoard\n","import React, { Component } from 'react'\n\nclass QuestionComponent extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"question-component\">\n                <h3><span class=\"category\">Category:</span> {this.props.question.category.title}</h3>\n                <h3><span class=\"points\">Points:</span> {this.props.question.value}</h3>\n                <h3><span class=\"question\">Question:</span> {this.props.question.question}</h3>\n                <button onClick={this.props.clickRevealAnswer}>Click To Review Answer</button>\n                { this.props.revealAnswer ? <div className=\"answer\"><h3>Answer: {this.props.question.answer}</h3></div> : ''}\n            </div>\n        )\n    }\n}\n\nexport default QuestionComponent\n","import React, { Component } from 'react'\nimport QuestionComponent from './QuestionComponent';\n\nclass Questions extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            revealAnswer: false\n        }\n    }\n\n    getQuestions = () => {\n        this.props.getQuestions();\n        this.setState({ revealAnswer: false});\n    }\n\n    clickRevealAnswer = () => {\n        this.setState( {revealAnswer: !this.state.revealAnswer});\n    }\n\n    render() {\n        let questions;\n        if (this.props.questions) {\n            questions = this.props.questions.map(question => {\n                return (\n                    <QuestionComponent \n                        question={question} \n                        clickRevealAnswer={this.clickRevealAnswer} \n                        revealAnswer={this.state.revealAnswer} \n                    />\n                )\n            })\n        }\n\n        return (\n            <div class=\"questions\">\n                <h3>Let's Play!</h3>\n                <button onClick={this.getQuestions}>Get Question</button>\n                { questions ? questions : '' }\n            </div>\n        )\n    }\n}\n\nexport default Questions;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ScoreBoard from './Components/ScoreBoard';\nimport Questions from './Components/Questions';\n\n\nclass App extends Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n          score: 0,\n          questions: null,\n          searchURL: 'https://jservice.io/api/random'\n      }\n  }\n  async getData() {\n      try {\n          const response = await fetch(this.state.searchURL);\n          const result = await response.json();\n          this.setState({\n              questions: result\n          })\n      } catch (err) {\n          console.log('ERROR', err);\n      }\n  }\n\n  getQuestions = () => {\n      this.getData();\n  }\n\n  updateScore = action => {\n      if (action === 'increase') {\n          this.setState( { score: this.state.score + 1 });\n      } else if (action === 'decrease') {\n          this.setState( { score: this.state.score -1 });\n      } else if (action === 'reset') {\n          this.setState( { score: 0 });\n      }\n  }\n\n  render() {\n      return (\n          <div className=\"container\">\n              <h1>Welcome To Jeopardy!</h1>\n              <ScoreBoard score={this.state.score} updateScore={this.updateScore} />\n              <Questions questions={this.state.questions} getQuestions={this.getQuestions} onChange={this.eventHandler}/>\n          </div>\n      )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}